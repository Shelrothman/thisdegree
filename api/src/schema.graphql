type Query {
    info: String!
    getMovies: [Movie]! # gets all movies
    getMovie(id: String!): Movie! # gets a movie by id that exists in db
    getCastList(title: String!): [Actor]! # ? gets the cast list of a movie by title through the wiki api 
    getTrees(filter: String): [Tree]! # gets all trees in db
}
# // add to generate the id automatically
type Mutation {
    addMovie(title: String!): Movie!
    addActor(name: String!): Actor!
    addMovieAndCast(title: String!): Movie! # add cast from the movie title
    
    # add a tree to the db with the stringified array of the tree declaration=
    addTree(treeDeclaration: String!): Tree! 
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
}

# type Subscription {
#     newTree: Tree
# }

type Movie {
    id: ID!
    title: String!
    castList: String! # for now, just a string of actor objects bc sqlite doesn't support arrays :(.. so even tho we cud do it here it still needs to match from the db so its simpler to just have it match here and ther
}

# * there will be contraints/LOGIC in place elsewhere to only allow a user to add a tree to the db, IF it is valid, 
# * i.e the game is a winning game
type Tree {
    id: ID!
    treeDeclaration: String! # stringified list of ids that follow pattern [{type: actor, id: actor-id}, {type: movie, id: movie-id},...]
    postedBy: User
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    trees: [Tree]
}

type Actor {
    id: ID!
    name: String!
}