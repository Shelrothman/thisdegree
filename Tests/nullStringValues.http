###
# check here the wide variety of values for testing the eval strings.
# e.g. including null in what the rule is lookiong for; like(), in(), contains(), containsLike(), all the string functions(length, trim, trimLeft, trimRight, lowercase, uppercase),
            # do the same with an empty string ""
            # dont need to pass in undefined as that would never technically be "in" the data
# ! just doing string functions here... where else do we need to test null values?
###

@baseURL = http://localhost:8080/v1

###
# null in `LIKE`
POST {{baseURL}}/rules/evaluate

{
    "data": [
        {
            "type": "rule",
            "attributes": {
                "expression": "@foo like \"%bar%\""
            }
        },
        {
            "type": "evaluationData",
            "attributes": {
                "foo": null
            }
        }
    ]
}

###
# null in `in`
POST {{baseURL}}/rules/evaluate

{
    "data": [
        {
            "type": "rule",
            "attributes": {
                "expression": "in(@foo.bar, \"PT\", \"AS\")"
            }
        },
        {
            "type": "evaluationData",
            "attributes": {
                "foo": { 
                    "bar": null
                }
            }
        }
    ]
}

###
###
# null in `CONTAINS`
POST {{baseURL}}/rules/evaluate

{
    "data": [
        {
            "type": "rule",
            "attributes": {
                "expression": "contains(@foo.bar, \"PT\", \"AS\")"
            }
        },
        {
            "type": "evaluationData",
            "attributes": {
                "foo": { 
                    "bar": null
                }
            }
        }
    ]
}

###
# null in `CONTAINSLIKE`
POST {{baseURL}}/rules/evaluate

{
    "data": [
        {
            "type": "rule",
            "attributes": {
                "expression": "containsLike(@foo.bar, \"_ww%3\", \"AS\")"
            }
        },
        {
            "type": "evaluationData",
            "attributes": {
                "foo": { 
                    "bar": null
                }
            }
        }
    ]
}

### 
# string functions (length, trim, trimLeft, trimRight), with null
POST {{baseURL}}/rules/evaluate

{
    "data": [
        {
            "type": "rule",
            "attributes": {
                "expression": "length(@foo.bar.shel) == 2 or trimLeft(@foo.bar.shel) == \"yo\" or trim(@foo.baz) == \"yo\"  or trimRight(@foo.shel) == \"yo\""
            }
        },
        {
            "type": "evaluationData",
            "attributes": {
                "foo": {
                    "bar": {
                        "shel": null
                    },
                    "baz": null,
                    "shel": null
                }
            }
        }
    ]
}


###
# string functions (lowercase, uppercase), with null
POST {{baseURL}}/rules/evaluate

{
    "data": [
        {
            "type": "rule",
            "attributes": {
                "expression": "uppercase(@foo.bar.shel) == \"YO\" or lowercase(@foo.shel) == \"hi\""
            }
        },
        {
            "type": "evaluationData",
            "attributes": {
                "foo": {
                    "bar": {
                        "shel": null
                    },
                    "shel": null
                }
            }
        }
    ]
}